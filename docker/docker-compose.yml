version: '2'
services:
  # MySQLのコンテナを作成するための設定
  employees_db:
    container_name: employees_db
    image: employees_db
    build: ./mysql
    ports:
      - "3306:3306"
    # コンテナ内の環境変数を指定
    environment:
      MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
    # 指定のディレクトリ・ファイルを、コンテナにマウントする
    volumes:
      - "./mysql/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d"
      - "./mysql/conf.d/:/etc/mysql/conf.d/"
      - db-data:/var/lib/mysql
  # Railsアプリのコンテナを作成するための設定
  employees_app:
    container_name: employees_app
    image: employees_app
    # コンテナ作成に利用するファイル群を指定する（この場合、Dockerfileが存在するディレクトリを指定）
    build: ..
    # stdin_open: true = コンテナの標準入力をオープンしたままにする
    stdin_open: true
    # tty:true = コンテナに疑似TTYを割り当てる
    tty: true
    # コンテナ立ち上げ時に実行するコマンドを指定
    command: bin/rails s -p 3000 -b '0.0.0.0'
    volumes:
      # employees/DcokerfileのRUNコマンドで作成しているディレクトリにマウント
      - ..:/employees
      - bundle:/bundle
    # ポート指定
    ports:
      - "3000:3000"
    environment:
      - "S3_ACCESS_KEY=AKIAIOSFODNN7EXAMPLE"
      - "S3_SECRET_ACCESS_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"
      - "S3_REGION=ap-northeast-1"
      - "S3_HOST=employees_s3"
      - "S3_BUCKET=employees"
      - "S3_ENDPOINT=http://employees_s3:9000"
      - "S3_ASSET_HOST=http://localhost:9000/employees"
    # コンテナ間の依存指定（この場合、employees_dbが立ち上がるまで（ビルドされるまで？）
    # employees_appのコンテナ立ち上げ（ビルド？）は実行されない
    depends_on:
      - employees_db
  employees_s3:
    container_name: employees_s3
    image: employees_s3
    build: ./s3
    stdin_open: true
    tty: true
    command: server /export
    ports:
      - "9000:9000"
    volumes:
      - "./s3:/export"
    environment:
      - "MINIO_ACCESS_KEY=AKIAIOSFODNN7EXAMPLE"
      - "MINIO_SECRET_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"

# MySQLのデータや、gemなど、ボリュームとして別管理することが出来る
# コンテナ側でマウントするように設定することで、たとえdocker imageを削除したとしてもデータを引き継ぐ事ができる
volumes:
  db-data:
    driver: local
  bundle:
    driver: local
